ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32g4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB336:
  28              		.file 1 "Core/Src/stm32g4xx_it.c"
   1:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32g4xx_it.c **** /**
   3:Core/Src/stm32g4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32g4xx_it.c ****   * @file    stm32g4xx_it.c
   5:Core/Src/stm32g4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32g4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32g4xx_it.c ****   * @attention
   8:Core/Src/stm32g4xx_it.c ****   *
   9:Core/Src/stm32g4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32g4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32g4xx_it.c ****   *
  12:Core/Src/stm32g4xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32g4xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32g4xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32g4xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32g4xx_it.c ****   *
  17:Core/Src/stm32g4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32g4xx_it.c ****   */
  19:Core/Src/stm32g4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32g4xx_it.c **** 
  21:Core/Src/stm32g4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32g4xx_it.c **** #include "main.h"
  23:Core/Src/stm32g4xx_it.c **** #include "stm32g4xx_it.h"
  24:Core/Src/stm32g4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32g4xx_it.c **** #include "string.h"
  27:Core/Src/stm32g4xx_it.c **** #include "stdio.h"
  28:Core/Src/stm32g4xx_it.c **** #include "FreeRTOS.h"
  29:Core/Src/stm32g4xx_it.c **** #include"queue.h"
  30:Core/Src/stm32g4xx_it.c **** /* USER CODE END Includes */
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 2


  31:Core/Src/stm32g4xx_it.c **** 
  32:Core/Src/stm32g4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN TD */
  34:Core/Src/stm32g4xx_it.c **** 
  35:Core/Src/stm32g4xx_it.c **** /* USER CODE END TD */
  36:Core/Src/stm32g4xx_it.c **** 
  37:Core/Src/stm32g4xx_it.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN PD */
  39:Core/Src/stm32g4xx_it.c **** 
  40:Core/Src/stm32g4xx_it.c **** /* USER CODE END PD */
  41:Core/Src/stm32g4xx_it.c **** 
  42:Core/Src/stm32g4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN PM */
  44:Core/Src/stm32g4xx_it.c **** 
  45:Core/Src/stm32g4xx_it.c **** /* USER CODE END PM */
  46:Core/Src/stm32g4xx_it.c **** 
  47:Core/Src/stm32g4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN PV */
  49:Core/Src/stm32g4xx_it.c **** extern uint8_t receive_buff[255];
  50:Core/Src/stm32g4xx_it.c **** extern QueueHandle_t CommandQueueHandle;
  51:Core/Src/stm32g4xx_it.c **** extern int receive;
  52:Core/Src/stm32g4xx_it.c **** /* USER CODE END PV */
  53:Core/Src/stm32g4xx_it.c **** 
  54:Core/Src/stm32g4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN PFP */
  56:Core/Src/stm32g4xx_it.c **** void USER_UART_IRQHandler(UART_HandleTypeDef *huart);
  57:Core/Src/stm32g4xx_it.c **** void USAR_UART_IDLECallback(UART_HandleTypeDef *huart);
  58:Core/Src/stm32g4xx_it.c **** 
  59:Core/Src/stm32g4xx_it.c **** /* USER CODE END PFP */
  60:Core/Src/stm32g4xx_it.c **** 
  61:Core/Src/stm32g4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/stm32g4xx_it.c **** 
  64:Core/Src/stm32g4xx_it.c **** /* USER CODE END 0 */
  65:Core/Src/stm32g4xx_it.c **** 
  66:Core/Src/stm32g4xx_it.c **** /* External variables --------------------------------------------------------*/
  67:Core/Src/stm32g4xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  68:Core/Src/stm32g4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  69:Core/Src/stm32g4xx_it.c **** extern UART_HandleTypeDef huart1;
  70:Core/Src/stm32g4xx_it.c **** extern TIM_HandleTypeDef htim5;
  71:Core/Src/stm32g4xx_it.c **** 
  72:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN EV */
  73:Core/Src/stm32g4xx_it.c **** 
  74:Core/Src/stm32g4xx_it.c **** /* USER CODE END EV */
  75:Core/Src/stm32g4xx_it.c **** 
  76:Core/Src/stm32g4xx_it.c **** /******************************************************************************/
  77:Core/Src/stm32g4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  78:Core/Src/stm32g4xx_it.c **** /******************************************************************************/
  79:Core/Src/stm32g4xx_it.c **** /**
  80:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  81:Core/Src/stm32g4xx_it.c ****   */
  82:Core/Src/stm32g4xx_it.c **** void NMI_Handler(void)
  83:Core/Src/stm32g4xx_it.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 3


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  84:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  85:Core/Src/stm32g4xx_it.c **** 
  86:Core/Src/stm32g4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  87:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  88:Core/Src/stm32g4xx_it.c ****   while (1)
  36              		.loc 1 88 3 discriminator 1 view .LVU1
  89:Core/Src/stm32g4xx_it.c ****   {
  90:Core/Src/stm32g4xx_it.c ****   }
  37              		.loc 1 90 3 discriminator 1 view .LVU2
  88:Core/Src/stm32g4xx_it.c ****   {
  38              		.loc 1 88 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE336:
  43              		.section	.rodata.HardFault_Handler.str1.4,"aMS",%progbits,1
  44              		.align	2
  45              	.LC0:
  46 0000 4552524F 		.ascii	"ERROR\015\000"
  46      520D00
  47              		.section	.text.HardFault_Handler,"ax",%progbits
  48              		.align	1
  49              		.global	HardFault_Handler
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	HardFault_Handler:
  55              	.LFB337:
  91:Core/Src/stm32g4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Core/Src/stm32g4xx_it.c **** }
  93:Core/Src/stm32g4xx_it.c **** 
  94:Core/Src/stm32g4xx_it.c **** /**
  95:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Core/Src/stm32g4xx_it.c ****   */
  97:Core/Src/stm32g4xx_it.c **** void HardFault_Handler(void)
  98:Core/Src/stm32g4xx_it.c **** {
  56              		.loc 1 98 1 view -0
  57              		.cfi_startproc
  58              		@ Volatile: function does not return.
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61 0000 08B5     		push	{r3, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 3, -8
  65              		.cfi_offset 14, -4
  99:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Core/Src/stm32g4xx_it.c ****     printf("ERROR\r\n");
  66              		.loc 1 100 5 view .LVU5
  67 0002 0248     		ldr	r0, .L6
  68 0004 FFF7FEFF 		bl	puts
  69              	.LVL0:
  70              	.L4:
 101:Core/Src/stm32g4xx_it.c **** 
 102:Core/Src/stm32g4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 4


 103:Core/Src/stm32g4xx_it.c ****   while (1)
  71              		.loc 1 103 3 discriminator 1 view .LVU6
 104:Core/Src/stm32g4xx_it.c ****   {
 105:Core/Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 106:Core/Src/stm32g4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 107:Core/Src/stm32g4xx_it.c ****   }
  72              		.loc 1 107 3 discriminator 1 view .LVU7
 103:Core/Src/stm32g4xx_it.c ****   {
  73              		.loc 1 103 9 discriminator 1 view .LVU8
  74 0008 FEE7     		b	.L4
  75              	.L7:
  76 000a 00BF     		.align	2
  77              	.L6:
  78 000c 00000000 		.word	.LC0
  79              		.cfi_endproc
  80              	.LFE337:
  82              		.section	.text.MemManage_Handler,"ax",%progbits
  83              		.align	1
  84              		.global	MemManage_Handler
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	MemManage_Handler:
  90              	.LFB338:
 108:Core/Src/stm32g4xx_it.c **** }
 109:Core/Src/stm32g4xx_it.c **** 
 110:Core/Src/stm32g4xx_it.c **** /**
 111:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Memory management fault.
 112:Core/Src/stm32g4xx_it.c ****   */
 113:Core/Src/stm32g4xx_it.c **** void MemManage_Handler(void)
 114:Core/Src/stm32g4xx_it.c **** {
  91              		.loc 1 114 1 view -0
  92              		.cfi_startproc
  93              		@ Volatile: function does not return.
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.L9:
 115:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 116:Core/Src/stm32g4xx_it.c **** 
 117:Core/Src/stm32g4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 118:Core/Src/stm32g4xx_it.c ****   while (1)
  98              		.loc 1 118 3 discriminator 1 view .LVU10
 119:Core/Src/stm32g4xx_it.c ****   {
 120:Core/Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 121:Core/Src/stm32g4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 122:Core/Src/stm32g4xx_it.c ****   }
  99              		.loc 1 122 3 discriminator 1 view .LVU11
 118:Core/Src/stm32g4xx_it.c ****   {
 100              		.loc 1 118 9 discriminator 1 view .LVU12
 101 0000 FEE7     		b	.L9
 102              		.cfi_endproc
 103              	.LFE338:
 105              		.section	.text.BusFault_Handler,"ax",%progbits
 106              		.align	1
 107              		.global	BusFault_Handler
 108              		.syntax unified
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 5


 109              		.thumb
 110              		.thumb_func
 112              	BusFault_Handler:
 113              	.LFB339:
 123:Core/Src/stm32g4xx_it.c **** }
 124:Core/Src/stm32g4xx_it.c **** 
 125:Core/Src/stm32g4xx_it.c **** /**
 126:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 127:Core/Src/stm32g4xx_it.c ****   */
 128:Core/Src/stm32g4xx_it.c **** void BusFault_Handler(void)
 129:Core/Src/stm32g4xx_it.c **** {
 114              		.loc 1 129 1 view -0
 115              		.cfi_startproc
 116              		@ Volatile: function does not return.
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.L11:
 130:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 131:Core/Src/stm32g4xx_it.c **** 
 132:Core/Src/stm32g4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 133:Core/Src/stm32g4xx_it.c ****   while (1)
 121              		.loc 1 133 3 discriminator 1 view .LVU14
 134:Core/Src/stm32g4xx_it.c ****   {
 135:Core/Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 136:Core/Src/stm32g4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 137:Core/Src/stm32g4xx_it.c ****   }
 122              		.loc 1 137 3 discriminator 1 view .LVU15
 133:Core/Src/stm32g4xx_it.c ****   {
 123              		.loc 1 133 9 discriminator 1 view .LVU16
 124 0000 FEE7     		b	.L11
 125              		.cfi_endproc
 126              	.LFE339:
 128              		.section	.text.UsageFault_Handler,"ax",%progbits
 129              		.align	1
 130              		.global	UsageFault_Handler
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	UsageFault_Handler:
 136              	.LFB340:
 138:Core/Src/stm32g4xx_it.c **** }
 139:Core/Src/stm32g4xx_it.c **** 
 140:Core/Src/stm32g4xx_it.c **** /**
 141:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 142:Core/Src/stm32g4xx_it.c ****   */
 143:Core/Src/stm32g4xx_it.c **** void UsageFault_Handler(void)
 144:Core/Src/stm32g4xx_it.c **** {
 137              		.loc 1 144 1 view -0
 138              		.cfi_startproc
 139              		@ Volatile: function does not return.
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.L13:
 145:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 146:Core/Src/stm32g4xx_it.c **** 
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 6


 147:Core/Src/stm32g4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 148:Core/Src/stm32g4xx_it.c ****   while (1)
 144              		.loc 1 148 3 discriminator 1 view .LVU18
 149:Core/Src/stm32g4xx_it.c ****   {
 150:Core/Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 151:Core/Src/stm32g4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 152:Core/Src/stm32g4xx_it.c ****   }
 145              		.loc 1 152 3 discriminator 1 view .LVU19
 148:Core/Src/stm32g4xx_it.c ****   {
 146              		.loc 1 148 9 discriminator 1 view .LVU20
 147 0000 FEE7     		b	.L13
 148              		.cfi_endproc
 149              	.LFE340:
 151              		.section	.text.DebugMon_Handler,"ax",%progbits
 152              		.align	1
 153              		.global	DebugMon_Handler
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	DebugMon_Handler:
 159              	.LFB341:
 153:Core/Src/stm32g4xx_it.c **** }
 154:Core/Src/stm32g4xx_it.c **** 
 155:Core/Src/stm32g4xx_it.c **** /**
 156:Core/Src/stm32g4xx_it.c ****   * @brief This function handles Debug monitor.
 157:Core/Src/stm32g4xx_it.c ****   */
 158:Core/Src/stm32g4xx_it.c **** void DebugMon_Handler(void)
 159:Core/Src/stm32g4xx_it.c **** {
 160              		.loc 1 159 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 160:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 161:Core/Src/stm32g4xx_it.c **** 
 162:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 163:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 164:Core/Src/stm32g4xx_it.c **** 
 165:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 166:Core/Src/stm32g4xx_it.c **** }
 165              		.loc 1 166 1 view .LVU22
 166 0000 7047     		bx	lr
 167              		.cfi_endproc
 168              	.LFE341:
 170              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 171              		.align	1
 172              		.global	DMA1_Channel2_IRQHandler
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 177              	DMA1_Channel2_IRQHandler:
 178              	.LFB342:
 167:Core/Src/stm32g4xx_it.c **** 
 168:Core/Src/stm32g4xx_it.c **** /******************************************************************************/
 169:Core/Src/stm32g4xx_it.c **** /* STM32G4xx Peripheral Interrupt Handlers                                    */
 170:Core/Src/stm32g4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 171:Core/Src/stm32g4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 7


 172:Core/Src/stm32g4xx_it.c **** /* please refer to the startup file (startup_stm32g4xx.s).                    */
 173:Core/Src/stm32g4xx_it.c **** /******************************************************************************/
 174:Core/Src/stm32g4xx_it.c **** 
 175:Core/Src/stm32g4xx_it.c **** /**
 176:Core/Src/stm32g4xx_it.c ****   * @brief This function handles DMA1 channel2 global interrupt.
 177:Core/Src/stm32g4xx_it.c ****   */
 178:Core/Src/stm32g4xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 179:Core/Src/stm32g4xx_it.c **** {
 179              		.loc 1 179 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 08B5     		push	{r3, lr}
 184              	.LCFI1:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
 180:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 181:Core/Src/stm32g4xx_it.c **** 
 182:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 183:Core/Src/stm32g4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 188              		.loc 1 183 3 view .LVU24
 189 0002 0248     		ldr	r0, .L17
 190 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 191              	.LVL1:
 184:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 185:Core/Src/stm32g4xx_it.c **** 
 186:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 187:Core/Src/stm32g4xx_it.c **** }
 192              		.loc 1 187 1 is_stmt 0 view .LVU25
 193 0008 08BD     		pop	{r3, pc}
 194              	.L18:
 195 000a 00BF     		.align	2
 196              	.L17:
 197 000c 00000000 		.word	hdma_adc1
 198              		.cfi_endproc
 199              	.LFE342:
 201              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 202              		.align	1
 203              		.global	DMA1_Channel3_IRQHandler
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 208              	DMA1_Channel3_IRQHandler:
 209              	.LFB343:
 188:Core/Src/stm32g4xx_it.c **** 
 189:Core/Src/stm32g4xx_it.c **** /**
 190:Core/Src/stm32g4xx_it.c ****   * @brief This function handles DMA1 channel3 global interrupt.
 191:Core/Src/stm32g4xx_it.c ****   */
 192:Core/Src/stm32g4xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 193:Core/Src/stm32g4xx_it.c **** {
 210              		.loc 1 193 1 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214 0000 08B5     		push	{r3, lr}
 215              	.LCFI2:
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 8


 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 3, -8
 218              		.cfi_offset 14, -4
 194:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 195:Core/Src/stm32g4xx_it.c **** 
 196:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 197:Core/Src/stm32g4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 219              		.loc 1 197 3 view .LVU27
 220 0002 0248     		ldr	r0, .L21
 221 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 222              	.LVL2:
 198:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 199:Core/Src/stm32g4xx_it.c **** 
 200:Core/Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 201:Core/Src/stm32g4xx_it.c **** }
 223              		.loc 1 201 1 is_stmt 0 view .LVU28
 224 0008 08BD     		pop	{r3, pc}
 225              	.L22:
 226 000a 00BF     		.align	2
 227              	.L21:
 228 000c 00000000 		.word	hdma_usart1_rx
 229              		.cfi_endproc
 230              	.LFE343:
 232              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 233              		.align	1
 234              		.global	TIM5_IRQHandler
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 239              	TIM5_IRQHandler:
 240              	.LFB345:
 202:Core/Src/stm32g4xx_it.c **** 
 203:Core/Src/stm32g4xx_it.c **** /**
 204:Core/Src/stm32g4xx_it.c ****   * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI li
 205:Core/Src/stm32g4xx_it.c ****   */
 206:Core/Src/stm32g4xx_it.c **** void USART1_IRQHandler(void)
 207:Core/Src/stm32g4xx_it.c **** {
 208:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 209:Core/Src/stm32g4xx_it.c **** 
 210:Core/Src/stm32g4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 211:Core/Src/stm32g4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 212:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 213:Core/Src/stm32g4xx_it.c ****     USER_UART_IRQHandler(&huart1);
 214:Core/Src/stm32g4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 215:Core/Src/stm32g4xx_it.c **** }
 216:Core/Src/stm32g4xx_it.c **** 
 217:Core/Src/stm32g4xx_it.c **** /**
 218:Core/Src/stm32g4xx_it.c ****   * @brief This function handles TIM5 global interrupt.
 219:Core/Src/stm32g4xx_it.c ****   */
 220:Core/Src/stm32g4xx_it.c **** void TIM5_IRQHandler(void)
 221:Core/Src/stm32g4xx_it.c **** {
 241              		.loc 1 221 1 is_stmt 1 view -0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245 0000 08B5     		push	{r3, lr}
 246              	.LCFI3:
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 9


 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 3, -8
 249              		.cfi_offset 14, -4
 222:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 0 */
 223:Core/Src/stm32g4xx_it.c **** 
 224:Core/Src/stm32g4xx_it.c ****   /* USER CODE END TIM5_IRQn 0 */
 225:Core/Src/stm32g4xx_it.c ****   HAL_TIM_IRQHandler(&htim5);
 250              		.loc 1 225 3 view .LVU30
 251 0002 0248     		ldr	r0, .L25
 252 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 253              	.LVL3:
 226:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 1 */
 227:Core/Src/stm32g4xx_it.c **** 
 228:Core/Src/stm32g4xx_it.c ****   /* USER CODE END TIM5_IRQn 1 */
 229:Core/Src/stm32g4xx_it.c **** }
 254              		.loc 1 229 1 is_stmt 0 view .LVU31
 255 0008 08BD     		pop	{r3, pc}
 256              	.L26:
 257 000a 00BF     		.align	2
 258              	.L25:
 259 000c 00000000 		.word	htim5
 260              		.cfi_endproc
 261              	.LFE345:
 263              		.section	.rodata.USAR_UART_IDLECallback.str1.4,"aMS",%progbits,1
 264              		.align	2
 265              	.LC1:
 266 0000 25730A00 		.ascii	"%s\012\000"
 267              		.section	.text.USAR_UART_IDLECallback,"ax",%progbits
 268              		.align	1
 269              		.global	USAR_UART_IDLECallback
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 274              	USAR_UART_IDLECallback:
 275              	.LVL4:
 276              	.LFB347:
 230:Core/Src/stm32g4xx_it.c **** 
 231:Core/Src/stm32g4xx_it.c **** /* USER CODE BEGIN 1 */
 232:Core/Src/stm32g4xx_it.c **** void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
 233:Core/Src/stm32g4xx_it.c **** {
 234:Core/Src/stm32g4xx_it.c ****     if(USART1 == huart1.Instance)                                   //Determine whether it is seria
 235:Core/Src/stm32g4xx_it.c ****     {
 236:Core/Src/stm32g4xx_it.c ****         if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Determine whether it is an id
 237:Core/Src/stm32g4xx_it.c ****         {
 238:Core/Src/stm32g4xx_it.c ****             __HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //Clear the idle interrupt flag
 239:Core/Src/stm32g4xx_it.c ****             printf("\r\nUART1 Idle IQR Detected\r\n");
 240:Core/Src/stm32g4xx_it.c ****             USAR_UART_IDLECallback(huart);                          //Call interrupt handler
 241:Core/Src/stm32g4xx_it.c ****         }
 242:Core/Src/stm32g4xx_it.c ****     }
 243:Core/Src/stm32g4xx_it.c **** }
 244:Core/Src/stm32g4xx_it.c **** 
 245:Core/Src/stm32g4xx_it.c **** void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
 246:Core/Src/stm32g4xx_it.c **** {
 277              		.loc 1 246 1 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 56
 280              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 10


 281              		.loc 1 246 1 is_stmt 0 view .LVU33
 282 0000 30B5     		push	{r4, r5, lr}
 283              	.LCFI4:
 284              		.cfi_def_cfa_offset 12
 285              		.cfi_offset 4, -12
 286              		.cfi_offset 5, -8
 287              		.cfi_offset 14, -4
 288 0002 8FB0     		sub	sp, sp, #60
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 72
 247:Core/Src/stm32g4xx_it.c ****     HAL_UART_DMAStop(&huart1);//Stop this DMA transfer
 291              		.loc 1 247 5 is_stmt 1 view .LVU34
 292 0004 1548     		ldr	r0, .L31
 293              	.LVL5:
 294              		.loc 1 247 5 is_stmt 0 view .LVU35
 295 0006 FFF7FEFF 		bl	HAL_UART_DMAStop
 296              	.LVL6:
 248:Core/Src/stm32g4xx_it.c **** 
 249:Core/Src/stm32g4xx_it.c ****     uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);   //Calculate the length o
 297              		.loc 1 249 5 is_stmt 1 view .LVU36
 298              		.loc 1 249 34 is_stmt 0 view .LVU37
 299 000a 154B     		ldr	r3, .L31+4
 300 000c 1B68     		ldr	r3, [r3]
 301 000e 5B68     		ldr	r3, [r3, #4]
 302              		.loc 1 249 32 view .LVU38
 303 0010 DBB2     		uxtb	r3, r3
 304              		.loc 1 249 13 view .LVU39
 305 0012 DC43     		mvns	r4, r3
 306 0014 E4B2     		uxtb	r4, r4
 307              	.LVL7:
 250:Core/Src/stm32g4xx_it.c **** 
 251:Core/Src/stm32g4xx_it.c ****     if(data_length != 255) {
 308              		.loc 1 251 5 is_stmt 1 view .LVU40
 309              		.loc 1 251 7 is_stmt 0 view .LVU41
 310 0016 FF2C     		cmp	r4, #255
 311 0018 0CD1     		bne	.L30
 312              	.L28:
 252:Core/Src/stm32g4xx_it.c ****         data_length++;
 253:Core/Src/stm32g4xx_it.c ****         char str[50];
 254:Core/Src/stm32g4xx_it.c ****         void* ptr = &str;
 255:Core/Src/stm32g4xx_it.c ****         snprintf(str,50,"%s\n",&receive_buff);
 256:Core/Src/stm32g4xx_it.c ****         xQueueSendToBackFromISR(CommandQueueHandle, &ptr, 5);
 257:Core/Src/stm32g4xx_it.c ****         receive = 1;
 258:Core/Src/stm32g4xx_it.c ****     }
 259:Core/Src/stm32g4xx_it.c ****     memset(receive_buff,0,data_length);                                                 //Clear the
 313              		.loc 1 259 5 is_stmt 1 view .LVU42
 314 001a 124D     		ldr	r5, .L31+8
 315 001c 2246     		mov	r2, r4
 316 001e 0021     		movs	r1, #0
 317 0020 2846     		mov	r0, r5
 318 0022 FFF7FEFF 		bl	memset
 319              	.LVL8:
 260:Core/Src/stm32g4xx_it.c ****     data_length = 0;
 320              		.loc 1 260 5 view .LVU43
 261:Core/Src/stm32g4xx_it.c ****     HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 255);                    //Restart to sta
 321              		.loc 1 261 5 view .LVU44
 322 0026 FF22     		movs	r2, #255
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 11


 323 0028 2946     		mov	r1, r5
 324 002a 0C48     		ldr	r0, .L31
 325 002c FFF7FEFF 		bl	HAL_UART_Receive_DMA
 326              	.LVL9:
 262:Core/Src/stm32g4xx_it.c **** }
 327              		.loc 1 262 1 is_stmt 0 view .LVU45
 328 0030 0FB0     		add	sp, sp, #60
 329              	.LCFI6:
 330              		.cfi_remember_state
 331              		.cfi_def_cfa_offset 12
 332              		@ sp needed
 333 0032 30BD     		pop	{r4, r5, pc}
 334              	.LVL10:
 335              	.L30:
 336              	.LCFI7:
 337              		.cfi_restore_state
 338              	.LBB2:
 252:Core/Src/stm32g4xx_it.c ****         char str[50];
 339              		.loc 1 252 9 is_stmt 1 view .LVU46
 252:Core/Src/stm32g4xx_it.c ****         char str[50];
 340              		.loc 1 252 20 is_stmt 0 view .LVU47
 341 0034 5B42     		rsbs	r3, r3, #0
 342 0036 DCB2     		uxtb	r4, r3
 343              	.LVL11:
 253:Core/Src/stm32g4xx_it.c ****         void* ptr = &str;
 344              		.loc 1 253 9 is_stmt 1 view .LVU48
 254:Core/Src/stm32g4xx_it.c ****         snprintf(str,50,"%s\n",&receive_buff);
 345              		.loc 1 254 9 view .LVU49
 254:Core/Src/stm32g4xx_it.c ****         snprintf(str,50,"%s\n",&receive_buff);
 346              		.loc 1 254 15 is_stmt 0 view .LVU50
 347 0038 01A8     		add	r0, sp, #4
 348 003a 0090     		str	r0, [sp]
 255:Core/Src/stm32g4xx_it.c ****         xQueueSendToBackFromISR(CommandQueueHandle, &ptr, 5);
 349              		.loc 1 255 9 is_stmt 1 view .LVU51
 350 003c 094B     		ldr	r3, .L31+8
 351 003e 0A4A     		ldr	r2, .L31+12
 352 0040 3221     		movs	r1, #50
 353 0042 FFF7FEFF 		bl	snprintf
 354              	.LVL12:
 256:Core/Src/stm32g4xx_it.c ****         receive = 1;
 355              		.loc 1 256 9 view .LVU52
 356 0046 0023     		movs	r3, #0
 357 0048 0522     		movs	r2, #5
 358 004a 6946     		mov	r1, sp
 359 004c 0748     		ldr	r0, .L31+16
 360 004e 0068     		ldr	r0, [r0]
 361 0050 FFF7FEFF 		bl	xQueueGenericSendFromISR
 362              	.LVL13:
 257:Core/Src/stm32g4xx_it.c ****     }
 363              		.loc 1 257 9 view .LVU53
 257:Core/Src/stm32g4xx_it.c ****     }
 364              		.loc 1 257 17 is_stmt 0 view .LVU54
 365 0054 064B     		ldr	r3, .L31+20
 366 0056 0122     		movs	r2, #1
 367 0058 1A60     		str	r2, [r3]
 368 005a DEE7     		b	.L28
 369              	.L32:
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 12


 370              		.align	2
 371              	.L31:
 372 005c 00000000 		.word	huart1
 373 0060 00000000 		.word	hdma_usart1_rx
 374 0064 00000000 		.word	receive_buff
 375 0068 00000000 		.word	.LC1
 376 006c 00000000 		.word	CommandQueueHandle
 377 0070 00000000 		.word	receive
 378              	.LBE2:
 379              		.cfi_endproc
 380              	.LFE347:
 382              		.section	.rodata.USER_UART_IRQHandler.str1.4,"aMS",%progbits,1
 383              		.align	2
 384              	.LC2:
 385 0000 0D0A5541 		.ascii	"\015\012UART1 Idle IQR Detected\015\000"
 385      52543120 
 385      49646C65 
 385      20495152 
 385      20446574 
 386              		.section	.text.USER_UART_IRQHandler,"ax",%progbits
 387              		.align	1
 388              		.global	USER_UART_IRQHandler
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	USER_UART_IRQHandler:
 394              	.LVL14:
 395              	.LFB346:
 233:Core/Src/stm32g4xx_it.c ****     if(USART1 == huart1.Instance)                                   //Determine whether it is seria
 396              		.loc 1 233 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 234:Core/Src/stm32g4xx_it.c ****     {
 400              		.loc 1 234 5 view .LVU56
 234:Core/Src/stm32g4xx_it.c ****     {
 401              		.loc 1 234 24 is_stmt 0 view .LVU57
 402 0000 0A4B     		ldr	r3, .L41
 403 0002 1B68     		ldr	r3, [r3]
 234:Core/Src/stm32g4xx_it.c ****     {
 404              		.loc 1 234 7 view .LVU58
 405 0004 0A4A     		ldr	r2, .L41+4
 406 0006 9342     		cmp	r3, r2
 407 0008 00D0     		beq	.L39
 408 000a 7047     		bx	lr
 409              	.L39:
 233:Core/Src/stm32g4xx_it.c ****     if(USART1 == huart1.Instance)                                   //Determine whether it is seria
 410              		.loc 1 233 1 view .LVU59
 411 000c 10B5     		push	{r4, lr}
 412              	.LCFI8:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 4, -8
 415              		.cfi_offset 14, -4
 416 000e 0446     		mov	r4, r0
 236:Core/Src/stm32g4xx_it.c ****         {
 417              		.loc 1 236 9 is_stmt 1 view .LVU60
 236:Core/Src/stm32g4xx_it.c ****         {
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 13


 418              		.loc 1 236 21 is_stmt 0 view .LVU61
 419 0010 DA69     		ldr	r2, [r3, #28]
 236:Core/Src/stm32g4xx_it.c ****         {
 420              		.loc 1 236 11 view .LVU62
 421 0012 12F0100F 		tst	r2, #16
 422 0016 00D1     		bne	.L40
 423              	.LVL15:
 424              	.L33:
 243:Core/Src/stm32g4xx_it.c **** 
 425              		.loc 1 243 1 view .LVU63
 426 0018 10BD     		pop	{r4, pc}
 427              	.LVL16:
 428              	.L40:
 238:Core/Src/stm32g4xx_it.c ****             printf("\r\nUART1 Idle IQR Detected\r\n");
 429              		.loc 1 238 13 is_stmt 1 view .LVU64
 430 001a 1022     		movs	r2, #16
 431 001c 1A62     		str	r2, [r3, #32]
 239:Core/Src/stm32g4xx_it.c ****             USAR_UART_IDLECallback(huart);                          //Call interrupt handler
 432              		.loc 1 239 13 view .LVU65
 433 001e 0548     		ldr	r0, .L41+8
 434              	.LVL17:
 239:Core/Src/stm32g4xx_it.c ****             USAR_UART_IDLECallback(huart);                          //Call interrupt handler
 435              		.loc 1 239 13 is_stmt 0 view .LVU66
 436 0020 FFF7FEFF 		bl	puts
 437              	.LVL18:
 240:Core/Src/stm32g4xx_it.c ****         }
 438              		.loc 1 240 13 is_stmt 1 view .LVU67
 439 0024 2046     		mov	r0, r4
 440 0026 FFF7FEFF 		bl	USAR_UART_IDLECallback
 441              	.LVL19:
 243:Core/Src/stm32g4xx_it.c **** 
 442              		.loc 1 243 1 is_stmt 0 view .LVU68
 443 002a F5E7     		b	.L33
 444              	.L42:
 445              		.align	2
 446              	.L41:
 447 002c 00000000 		.word	huart1
 448 0030 00380140 		.word	1073821696
 449 0034 00000000 		.word	.LC2
 450              		.cfi_endproc
 451              	.LFE346:
 453              		.section	.text.USART1_IRQHandler,"ax",%progbits
 454              		.align	1
 455              		.global	USART1_IRQHandler
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 460              	USART1_IRQHandler:
 461              	.LFB344:
 207:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 462              		.loc 1 207 1 is_stmt 1 view -0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466 0000 10B5     		push	{r4, lr}
 467              	.LCFI9:
 468              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 14


 469              		.cfi_offset 4, -8
 470              		.cfi_offset 14, -4
 211:Core/Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 471              		.loc 1 211 3 view .LVU70
 472 0002 044C     		ldr	r4, .L45
 473 0004 2046     		mov	r0, r4
 474 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 475              	.LVL20:
 213:Core/Src/stm32g4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 476              		.loc 1 213 5 view .LVU71
 477 000a 2046     		mov	r0, r4
 478 000c FFF7FEFF 		bl	USER_UART_IRQHandler
 479              	.LVL21:
 215:Core/Src/stm32g4xx_it.c **** 
 480              		.loc 1 215 1 is_stmt 0 view .LVU72
 481 0010 10BD     		pop	{r4, pc}
 482              	.L46:
 483 0012 00BF     		.align	2
 484              	.L45:
 485 0014 00000000 		.word	huart1
 486              		.cfi_endproc
 487              	.LFE344:
 489              		.text
 490              	.Letext0:
 491              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 492              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 493              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 494              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 495              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 496              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 497              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 498              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 499              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 500              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 501              		.file 12 "/Applications/ARM/arm-none-eabi/include/stdio.h"
 502              		.file 13 "<built-in>"
ARM GAS  /var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g4xx_it.c
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:20     .text.NMI_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:44     .rodata.HardFault_Handler.str1.4:0000000000000000 $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:48     .text.HardFault_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:54     .text.HardFault_Handler:0000000000000000 HardFault_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:78     .text.HardFault_Handler:000000000000000c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:83     .text.MemManage_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:89     .text.MemManage_Handler:0000000000000000 MemManage_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:106    .text.BusFault_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:112    .text.BusFault_Handler:0000000000000000 BusFault_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:129    .text.UsageFault_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:135    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:152    .text.DebugMon_Handler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:158    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:171    .text.DMA1_Channel2_IRQHandler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:177    .text.DMA1_Channel2_IRQHandler:0000000000000000 DMA1_Channel2_IRQHandler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:197    .text.DMA1_Channel2_IRQHandler:000000000000000c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:202    .text.DMA1_Channel3_IRQHandler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:208    .text.DMA1_Channel3_IRQHandler:0000000000000000 DMA1_Channel3_IRQHandler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:228    .text.DMA1_Channel3_IRQHandler:000000000000000c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:233    .text.TIM5_IRQHandler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:239    .text.TIM5_IRQHandler:0000000000000000 TIM5_IRQHandler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:259    .text.TIM5_IRQHandler:000000000000000c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:264    .rodata.USAR_UART_IDLECallback.str1.4:0000000000000000 $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:268    .text.USAR_UART_IDLECallback:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:274    .text.USAR_UART_IDLECallback:0000000000000000 USAR_UART_IDLECallback
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:372    .text.USAR_UART_IDLECallback:000000000000005c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:383    .rodata.USER_UART_IRQHandler.str1.4:0000000000000000 $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:387    .text.USER_UART_IRQHandler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:393    .text.USER_UART_IRQHandler:0000000000000000 USER_UART_IRQHandler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:447    .text.USER_UART_IRQHandler:000000000000002c $d
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:454    .text.USART1_IRQHandler:0000000000000000 $t
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:460    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
/var/folders/kk/4ptrdscs56z2zksmnr2snnnm0000gn/T//cc2xcU95.s:485    .text.USART1_IRQHandler:0000000000000014 $d

UNDEFINED SYMBOLS
puts
HAL_DMA_IRQHandler
hdma_adc1
hdma_usart1_rx
HAL_TIM_IRQHandler
htim5
HAL_UART_DMAStop
memset
HAL_UART_Receive_DMA
snprintf
xQueueGenericSendFromISR
huart1
receive_buff
CommandQueueHandle
receive
HAL_UART_IRQHandler
